# -*- coding: utf-8 -*-
"""fake_new_classification_using_bidirectional_lstm

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NHWf1kliH6KxR1lZOv608DZrwg0eHE1p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
nltk.download('stopwords')

"""#Mount Drive"""

from google.colab import drive
drive.mount('/content/drive')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
import string

"""#load a dataset"""

data=pd.read_csv("/content/drive/MyDrive/WELFake_Dataset.csv.zip")

"""#Analyze  the data"""

data.head()

data.isnull().sum()

data.loc[10]['title']

data2=data[['text','label']]

data2.dropna(inplace=True)

data2.isnull().sum()

data.duplicated().sum()

data.describe()

data2.label.value_counts()

sns.countplot(data=data2,x='label')

"""#Data Preprocessing"""

text=data2['text']

data2.reset_index(inplace=True)

import regex as re
corpus=[]
from nltk.stem import PorterStemmer
ps= PorterStemmer()
for i in range(data2.shape[0]):
    review = re.sub('[^a-zA-Z]',' ', data2['text'][i])
    review=review.lower()
    review=review.split()
    review=[ps.stem(word) for word in review if not word in stopwords.words('english')]
    review="  ".join(review)
    corpus.append(review)

len(corpus)

!pip install wordcloud
from wordcloud import WordCloud
wc= Wordcloud(max_font_size=300,width=800,height=600).generate(str())

from tensorflow.keras.layers import Embedding, LSTM,Bidirectional,Dense,Dropout
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.models import Sequential

voc_size = 5000

one_hot_repr=[one_hot(words,voc_size)for words in corpus]

sent_length=500
embedded =pad_sequences(one_hot_repr,padding='pre',maxlen=sent_length)
print(embedded)

from sklearn.model_selection import train_test_split
x=np.array(embedded)
y=np.array(data2.label[:4208])

x.shape

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

model=Sequential()
model.add(Embedding(voc_size,100))
model.add(Bidirectional(LSTM(100)))
model.add(Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=10,batch_size=64)

y_pred=model.predict(x_test)

y_p=np.round(y_pred).reshape(-1).astype(int)

y_test

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_p)*100